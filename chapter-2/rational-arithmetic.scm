(define (signum x)
  (cond 
    ((positive? x) 1)
    ((negative? x) -1)
    (else 0)))
(define (make-rat n d)
  (let* ((sign (* (signum n) (signum d)))
	(g (gcd n d))
	(abs-n (abs n))
	(abs-d (abs d))
	(gcd-n (/ abs-n g))
	(gcd-d (/ abs-d g)))
    (if 
      (positive? sign)
      (cons gcd-n gcd-d)
      (cons (- gcd-n) gcd-d))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (display-rat x)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (linear-combination a b x y)
  (+ (* a x) (* b y)))
(define (negate-rat x)
  (make-rat (- (numer x)) (denom x)))
(define (add-rat x y)
  (make-rat (linear-combination (numer x) (numer y) (denom y) (denom x))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (add-rat x (negate-rat y)))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (numer y) (denom x))))
(define one-rat (make-rat 1 1))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))