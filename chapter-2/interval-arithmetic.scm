(define (make-interval x y)
  (cons x y))
(define (lower-bound interval)
  (car interval))
(define (upper-bound interval)
  (cdr interval))
(define (bounds-operation op)
  (lambda (x y)
    (make-interval (op (lower-bound x) (lower-bound y))
                   (op (upper-bound x) (upper-bound y)))))
(define (add-interval x y)
  ((bounds-operation (lambda (x y) (+ x y))) x y))
(define (comparative-make-interval op)
  (lambda (x y)
    (let
        ((p1 (op (upper-bound x) (upper-bound y)))
         (p2 (op (upper-bound x) (lower-bound y)))
         (p3 (op (lower-bound x) (upper-bound y)))
         (p4 (op (lower-bound x) (lower-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4)))))
(define (mul-interval x y)
  ((comparative-make-interval (lambda(x y) (* x y))) x y))
(define (reciprocate interval)
  (make-interval (/ 1.0 (upper-bound interval))
                 (/ 1.0 (lower-bound interval))))
(define (length-interval interval) 
  (- (upper-bound interval) (lower-bound interval)))
(define (div-interval x y) ; returns (/ x y) 
  (if (= 0 (length-interval y))
      (error "Cannot divide by interval of length zero" y)
      (mul-interval x (reciprocate y))))
(define (sub-interval x y)
  ((comparative-make-interval (lambda(x y) (- x y)) x y)))
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2.0))
(define (make-center-percent c p)
  (make-center-width (c (* c (/ p 100.0)))))
(define (percent i)
  (/ (length-interval i) 100.0))
(define one (make-interval 1 1))
(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
(define (par2 r1 r2)
  (div-interval
   one (add-interval (div-interval one r1)
                     (div-interval one r2))))