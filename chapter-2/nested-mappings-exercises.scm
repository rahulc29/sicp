#lang sicp
(define (enumerate-interval lo hi)
  (if (> lo hi)
      '()
      (cons lo (enumerate-interval (+ lo 1) hi))))
(define (accumulate op id seq)
  (if (null? seq)
      id
      (op (car seq) (accumulate op id (cdr seq)))))
(define (generalised-flatmap flattener proc seq)
  (accumulate flattener nil (map proc seq)))
(define (flatmap proc seq)
  (generalised-flatmap append proc seq))
(define (filter pred seq)
  (accumulate (lambda (curr rest)
                (if (pred curr)
                    (cons curr rest)
                    rest))
              '()
              seq))
(define (unique-pairs n)
  (flatmap (lambda (i)
             (map (lambda (j)
                    (if (< j i)
                        (list j i)
                        '()))
                  (enumerate-interval 1 (- i 1))))
           (enumerate-interval 1 n)))
(define (constrained-triplets n s)
  (filter (lambda (list) (not (null? list)))
          (flatmap (lambda (i)
                     (flatmap (lambda (j)
                                (map (lambda (k)
                                       (if (= (+ i j k) s)
                                           (list i j k)
                                           '()))
                                     (enumerate-interval 1 n)))
                              (enumerate-interval 1 n)))
                   (enumerate-interval 1 n))))


   
