(define (exp-binary a b)
  (define (iter a b product)
    (cond
      ((= b 0) product)
      ((even? b) (iter (* a a) (/ b 2) product))
      (else (iter a (- b 1) (* product a)))))
  (iter a b 1))
(define (extract-factors n k)
  (if (not (= 0 (remainder n k)))
      n
      (extract-factors (/ n k) k)))
(define (cons-ints a b)
  (* (exp-binary 2 a)
     (exp-binary 3 b)))
(define (extract-power n k)
  (define (iter n k answer)
    (if (not (= 0 (remainder n k)))
        answer
        (iter (/ n k) k (+ 1 answer))))
  (iter n k 0))
(define (car-ints pair)
  (extract-power (extract-factors pair 3) 2))
(define (cdr-ints pair)
  (extract-power (extract-factors pair 2) 3))