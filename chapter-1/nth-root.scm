(define (close-enough? x y)
  (<= (abs (- x y)) 0.000001))
(define (fixed-point-iter f guess)
  (display guess)
  (newline)
  (define next-guess (f guess))
  (if
   (close-enough? guess next-guess)
   next-guess
   (fixed-point-iter f next-guess)))
(define (fixed-point f guess)
  (fixed-point-iter f (f guess)))
(define (average x y)
  (/ (+ x y) 2.0))
(define (average-damp f)
  (lambda(x)
    (average x (f x))))
(define (square x)
  (* x x))
(define (exp-iter a b n)
  (cond
    ((= n 1) (* a b))
    ((even? n) (exp-iter a (square b) (/ n 2)))
    (else (exp-iter (* a b) (square b) (/ (- n 1) 2)))))
(define (exp-tailrec b n)
  (exp-iter 1 b n))
(define (root-core n x)
  (lambda(y)
    (/ x (exp-tailrec y (- n 1)))))
(define (compose f g)
  (lambda(x) (f (g x))))
(define (repeated f n)
  (define (iter k result)
    (if (= k n)
        result
        (iter (+ k 1) (compose result f))))
  (iter 1 f))
(define (root n x)
  (define (root-impl n k x)
    (fixed-point ((repeated average-damp k) (root-core n x)) 1.0))
  (define (compute-k n)
    (floor (/ (log n) (log 2))))
  (root-impl n (compute-k n) x))