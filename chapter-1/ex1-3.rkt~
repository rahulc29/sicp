#lang racket
(define (square a) 
    (* a a))
(define (sum-of-squares a b) 
    (+ (square a) (square b)))
(define (larger-two a b c) 
    (cond 
    [(and (> a b) (> a c)) (values a (max b c))]
    [(and (> b a) (> b c)) (values b (max c a))]
    [(and (> c a) (> c b)) (values c (max a b))]
    [else (b c)]))
(define (larger-two-sum-of-squares a b c)
    (let([a (fst (larger-two a b c))]
         [b (snd (larger-two a b c))]) (sum-of-squares a b)))
(larger-two-sum-of-squares 2 3 4)